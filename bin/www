#!/usr/bin/env node

/**
 * Module dependencies.
 */
// var app = require('../app');
var app = require('../app').app;
var https = require('https');
var http = require('http')
var fs = require('fs');
var path = require('path');
var debug = require('debug')('techverse:server');

/**
 * Get port from environment and store in Express.
 */

var port = process.env.PORT || 4000 ;
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);
// var server = require('../app').server;
// console.log(server);

/**
 * Listen on provided port, on all network interfaces.
 */
const keyFile = path.join(__dirname,'../certs/key.pem')
const certFile = path.join(__dirname,'../certs/cert.pem')

// https.createServer({
//   key: fs.readFileSync(keyFile),
//   cert: fs.readFileSync(certFile),
//   passphrase:'ucholafia'
// }, app).listen(port)


// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);


// var LEX = require('letsencrypt-express').testing();

// // Change these two lines!
// var DOMAIN = 'theos-polling-app.herokuapp.com';
// var EMAIL = 'pietrosparks@gmail.com';

// var lex = LEX.create({
//   configDir: require('os').homedir() + '/letsencrypt/etc'
// , approveRegistration: function (hostname, approve) { // leave `null` to disable automatic registration
//     if (hostname === DOMAIN) { // Or check a database or list of allowed domains
//       approve(null, {
//         domains: [DOMAIN]
//       , email: EMAIL
//       , agreeTos: true
//       });
//     }
//   }
// });

// lex.onRequest = app;

// lex.listen([80], [443, 5001], function () {
//   var protocol = ('requestCert' in this) ? 'https': 'http';
//   console.log("Listening at " + protocol + '://localhost:' + this.address().port);
// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
